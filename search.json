[{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with kuzuR","text":"Welcome kuzuR! guide walk basic steps get started kuzuR, installation running first query.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with kuzuR","text":"First, ensure kuzuR package installed GitHub. also need reticulate manage Python environment. Development Version Cran Version","code":"remotes::install_github(\"WickM/kuzuR\") install.packages(\"kuzuR\")"},{"path":[]},{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"create-a-connection","dir":"Articles","previous_headings":"Basic Usage","what":"1. Create a Connection","title":"Getting Started with kuzuR","text":"first step create connection Kuzu database. can create -memory database connect database disk.","code":"library(kuzuR)  # Create an in-memory database connection con <- kuzu_connection(\":memory:\")"},{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"create-a-schema","dir":"Articles","previous_headings":"Basic Usage","what":"2. Create a Schema","title":"Getting Started with kuzuR","text":"Next, define graph schema using Cypher queries. Let’s create simple schema Person nodes Knows relationships.","code":"kuzu_execute(con, paste(\"CREATE NODE TABLE Person(name STRING, age INT64,\",                         \"PRIMARY KEY (name))\")) #> <kuzu.query_result.QueryResult object at 0x7fa0bb1d4440> kuzu_execute(con, \"CREATE REL TABLE Knows(FROM Person TO Person, since INT64)\") #> <kuzu.query_result.QueryResult object at 0x7fa0c6542c00>"},{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"load-data","dir":"Articles","previous_headings":"Basic Usage","what":"3. Load Data","title":"Getting Started with kuzuR","text":"can load data R data frames directly Kuzu database.","code":"# Create a data frame of persons persons_df <- data.frame(   name = c(\"Alice\", \"Bob\", \"Carol\"),   age = c(35, 45, 25) )  # Create a data frame of relationships knows_df <- data.frame(   from_person = c(\"Alice\", \"Bob\"),   to_person = c(\"Bob\", \"Carol\"),   since = c(2010, 2015) )  # Load data into Kuzu kuzu_copy_from_df(con, persons_df, \"Person\") kuzu_copy_from_df(con, knows_df, \"Knows\")"},{"path":"https://wickm.github.io/kuzuR/articles/getting-started.html","id":"query-data","dir":"Articles","previous_headings":"Basic Usage","what":"4. Query Data","title":"Getting Started with kuzuR","text":"Finally, can query graph using Cypher retrieve results R data frame. concludes “Getting Started” guide. advanced topics, please see articles function reference.","code":"# Execute a query result <- kuzu_execute(con, paste(\"MATCH (a:Person)-[k:Knows]->(b:Person)\",                                   \"RETURN a.name, b.name, k.since\"))  # Convert the result to a data frame df <- as.data.frame(result) print(df) #>   a.name b.name k.since #> 1  Alice    Bob    2010 #> 2    Bob  Carol    2015"},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Graph Library Integrations","text":"vignette demonstrates convert Kuzu query results various R graph library objects, including igraph, tidygraph, g6R. showcases seamless integration kuzuR popular R packages graph analysis visualization.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"converting-to-igraph","dir":"Articles","previous_headings":"","what":"Converting to igraph","title":"Graph Library Integrations","text":"igraph package powerful tool graph manipulation analysis R. kuzuR provides direct conversion function as_igraph() transform Kuzu query results igraph objects.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"example-loading-and-converting-graph-data","dir":"Articles","previous_headings":"Converting to igraph","what":"Example: Loading and Converting Graph Data","title":"Graph Library Integrations","text":"First, let’s set Kuzu database load sample graph data. Now, let’s execute query returns graph data convert igraph object.  can now perform standard igraph operations igraph_graph.","code":"library(kuzuR) library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union  # Create a connection db_path <- tempfile() con <- kuzu_connection(db_path)  # Create schema for nodes and relationships kuzu_execute(con, paste(\"CREATE NODE TABLE Person(name STRING, age INT64,\",                         \"PRIMARY KEY (name))\")) #> <kuzu.query_result.QueryResult object at 0x7fac1d2669f0> kuzu_execute(con, \"CREATE REL TABLE Knows(FROM Person TO Person, since INT64)\") #> <kuzu.query_result.QueryResult object at 0x7fac0f54df40>  # Prepare data frames persons_data <- data.frame(   name = c(\"Alice\", \"Bob\", \"Carol\"),   age = c(35, 45, 25) )  knows_data <- data.frame(   from_person = c(\"Alice\", \"Bob\"),   to_person = c(\"Bob\", \"Carol\"),   since = c(2010, 2015) )  # Load data into Kuzu kuzu_copy_from_df(con, persons_data, \"Person\") kuzu_copy_from_df(con, knows_data, \"Knows\") # Query to get all persons and their relationships graph_query_result <- kuzu_execute(con, paste(\"MATCH (p1:Person)-[k:Knows]->\",                                               \"(p2:Person) RETURN p1, p2, k\"))  # Convert the Kuzu result to an igraph object igraph_graph <- as_igraph(graph_query_result)  # Print the igraph object summary print(igraph_graph) #> IGRAPH fc1a225 DN-- 3 2 --  #> + attr: name (v/c), age (v/n), Person (v/l), label (v/c), _src (e/x), #> | _dst (e/x), _id (e/x), since (e/n), _label (e/c) #> + edges from fc1a225 (vertex names): #> [1] Person_Alice->Person_Bob   Person_Bob  ->Person_Carol  V(igraph_graph)$label <- igraph::V(igraph_graph)$name E(igraph_graph)$label <- \"knows\" plot(igraph_graph)"},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"converting-to-tidygraph","dir":"Articles","previous_headings":"","what":"Converting to tidygraph","title":"Graph Library Integrations","text":"tidygraph package offers tidy data approach graph manipulation, integrating seamlessly tidyverse. kuzuR supports conversion tidygraph objects via as_tidygraph().","code":""},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"example-converting-to-tidygraph","dir":"Articles","previous_headings":"Converting to tidygraph","what":"Example: Converting to tidygraph","title":"Graph Library Integrations","text":"Using Kuzu query result, can convert tidygraph object.","code":"# Convert the Kuzu result to a tidygraph object tidygraph_graph <- as_tidygraph(graph_query_result)  # Print the tidygraph object summary print(tidygraph_graph) #> # A tbl_graph: 3 nodes and 2 edges #> # #> # A rooted tree #> # #> # Node Data: 3 × 4 (active) #>   name           age Person label  #>   <chr>        <dbl> <lgl>  <chr>  #> 1 Person_Alice    35 TRUE   Person #> 2 Person_Bob      45 TRUE   Person #> 3 Person_Carol    25 TRUE   Person #> # #> # Edge Data: 2 × 7 #>    from    to `_src`           `_dst`           `_id`            since `_label` #>   <int> <int> <list>           <list>           <list>           <dbl> <chr>    #> 1     1     2 <named list [2]> <named list [2]> <named list [2]>  2010 Knows    #> 2     2     3 <named list [2]> <named list [2]> <named list [2]>  2015 Knows plot(tidygraph_graph)"},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"interactive-visualization-with-g6r","dir":"Articles","previous_headings":"","what":"Interactive Visualization with g6R","title":"Graph Library Integrations","text":"g6R package provides R interface G6 JavaScript graph visualization library, enabling rich, interactive visualizations directly within R environments. Since g6R built-support igraph objects, can easily create interactive visualizations first converting Kuzu query result igraph object.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/graph-integrations.html","id":"example-creating-an-interactive-g6r-graph","dir":"Articles","previous_headings":"Interactive Visualization with g6R","what":"Example: Creating an Interactive g6R Graph","title":"Graph Library Integrations","text":"Building previous examples, can convert Kuzu query result g6R object. can customize appearance nodes edges informative visualization.","code":"library(g6R) #>  #> Attaching package: 'g6R' #> The following object is masked from 'package:graphics': #>  #>     legend #> The following object is masked from 'package:utils': #>  #>     history graph_query_result <- kuzu_execute(con, paste(\"MATCH (p1:Person)-[k:Knows]->\",                                               \"(p2:Person) RETURN p1, p2, k\")) # Convert the Kuzu result to a g6R-compatible list igraph_graph <- as_igraph(graph_query_result)  g6 <- g6_igraph(igraph_graph) |>   g6_layout(d3_force_layout()) |>   g6_options(     animation = FALSE,     node = list(       style = list(         labelText = JS(\"(d) => d.name\")       )     ),     edge = list(       style = list(         endArrow = TRUE,         labelText = JS(\"(d) => d.data.label\")       )     )   ) |>   g6_behaviors(     zoom_canvas(),     collapse_expand(),     drag_canvas(),     drag_element()   ) |>   g6_plugins(\"toolbar\")   # Display the graph g6"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"connecting-to-a-database","dir":"Articles","previous_headings":"","what":"1. Connecting to a Database","title":"Installation and Basic Usage","text":"First, load kuzuR package create connection Kuzu database. can create -memory database specify path database file disk.","code":"library(kuzuR) con <- kuzu_connection(\":memory:\")"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"data-types-and-schema-definition","dir":"Articles","previous_headings":"","what":"2. Data Types and Schema Definition","title":"Installation and Basic Usage","text":"Kuzu supports rich set data types. creating schema, need map R data types corresponding Kuzu LogicalTypeID.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"creating-a-complex-schema","dir":"Articles","previous_headings":"2. Data Types and Schema Definition","what":"Creating a Complex Schema","title":"Installation and Basic Usage","text":"can define schema node relationship tables using kuzu_execute(). ’s example complex schema:","code":"# Create a node table for users with various data types kuzu_execute(con, paste(\"CREATE NODE TABLE User(userID UUID, name STRING,\",                         \"age INT64, is_active BOOL, created_at TIMESTAMP,\",                         \"last_login DATE, notes STRING[],\",                         \"PRIMARY KEY (userID))\")) #> <kuzu.query_result.QueryResult object at 0x7f512e3abb00>  # Create a node table for products kuzu_execute(con, \"CREATE NODE TABLE Product(productID INT64, name STRING, PRIMARY KEY (productID))\") #> <kuzu.query_result.QueryResult object at 0x7f512d03b6e0>  # Create a relationship table for user purchases kuzu_execute(con, \"CREATE REL TABLE Buys(FROM User TO Product, purchase_date DATE)\") #> <kuzu.query_result.QueryResult object at 0x7f512d0a8fe0>"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"3. Loading Data","title":"Installation and Basic Usage","text":"can load data Kuzu tables R data frames external files like CSV.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"loading-from-a-data-frame","dir":"Articles","previous_headings":"3. Loading Data","what":"Loading from a Data Frame","title":"Installation and Basic Usage","text":"Use kuzu_copy_from_df() load data R data.frame.","code":"library(jsonlite) # Create data frames for nodes and relationships users <- data.frame(   userID = c(\"a1b2c3d4-e5f6-7890-1234-567890abcdef\", \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\"),   name = c(\"Alice\", \"Bob\"),   age = c(35, 45),   is_active = c(TRUE, FALSE),   created_at = as.POSIXct(c(\"2023-01-15 10:30:00\", \"2022-11-20 14:00:00\")),   last_login = as.Date(c(\"2023-10-25\", \"2023-09-30\")),   stringsAsFactors = FALSE ) # LIST types should be formatted as JSON strings users$notes <- c(toJSON(c(\"note1\", \"note2\")), toJSON(\"note3\"))  products <- data.frame(   productID = c(101, 102),   name = c(\"Laptop\", \"Mouse\") )  buys <- data.frame(   from_user = c(\"a1b2c3d4-e5f6-7890-1234-567890abcdef\", \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\"),   to_product = c(101, 102),   purchase_date = as.Date(c(\"2023-02-20\", \"2023-03-15\")) )  # Load data into Kuzu kuzu_copy_from_df(con, users, \"User\") kuzu_copy_from_df(con, products, \"Product\") kuzu_copy_from_df(con, buys, \"Buys\")"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"loading-from-a-csv-file","dir":"Articles","previous_headings":"3. Loading Data","what":"Loading from a CSV File","title":"Installation and Basic Usage","text":"Use kuzu_copy_from_csv() load data CSV file. work, file current working directory.","code":"# Create a CSV file in the project's root directory csv_filename <- \"products.csv\" write.csv(data.frame(productID = c(103, 104), name = c(\"Keyboard\", \"Monitor\")),           csv_filename, row.names = FALSE)  # Load data from the CSV file using just the filename kuzu_copy_from_csv(con, csv_filename, \"Product\")  # Clean up the created file unlink(csv_filename)"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"executing-queries-and-converting-results","dir":"Articles","previous_headings":"","what":"4. Executing Queries and Converting Results","title":"Installation and Basic Usage","text":"can execute Cypher queries using kuzu_execute() convert results various R formats.","code":"# Execute a query to get users and their purchases query_result <- kuzu_execute(con, \"MATCH (u:User)-[b:Buys]->(p:Product) RETURN u.name, p.name, b.purchase_date\")"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"a-note-on-query-results","dir":"Articles","previous_headings":"4. Executing Queries and Converting Results","what":"A Note on Query Results","title":"Installation and Basic Usage","text":"QueryResult object returned kuzu_execute() acts iterator results. means can consumed . Functions like .data.frame(), as_tibble(), kuzu_get_all(), graph conversion functions exhaust iterator.","code":""},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"convert-to-data-frame-or-tibble","dir":"Articles","previous_headings":"4. Executing Queries and Converting Results","what":"Convert to Data Frame or Tibble","title":"Installation and Basic Usage","text":"","code":"# Convert to a data frame df_result <- as.data.frame(query_result) print(df_result) #>   u.name p.name b.purchase_date #> 1  Alice Laptop      2023-02-20 #> 2    Bob  Mouse      2023-03-15  # Convert to a tibble library(tibble) tibble_result <- as_tibble(query_result) print(tibble_result) #> # A tibble: 2 × 3 #>   u.name p.name b.purchase_date     #>   <chr>  <chr>  <dttm>              #> 1 Alice  Laptop 2023-02-20 00:00:00 #> 2 Bob    Mouse  2023-03-15 00:00:00"},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"use-query-results-returned-as-list","dir":"Articles","previous_headings":"4. Executing Queries and Converting Results","what":"Use Query Results returned as list","title":"Installation and Basic Usage","text":"","code":"query_result <- kuzu_execute(con, \"MATCH (u:User)-[b:Buys]->(p:Product) RETURN u.name, p.name, b.purchase_date\")  result <- kuzu_get_all(query_result) print(result) #> [[1]] #> [[1]]$u.name #> [1] \"Alice\" #>  #> [[1]]$p.name #> [1] \"Laptop\" #>  #> [[1]]$b.purchase_date #> [1] \"2023-02-20\" #>  #>  #> [[2]] #> [[2]]$u.name #> [1] \"Bob\" #>  #> [[2]]$p.name #> [1] \"Mouse\" #>  #> [[2]]$b.purchase_date #> [1] \"2023-03-15\"  # only fetch 1. result  query_result <- kuzu_execute(con, \"MATCH (u:User)-[b:Buys]->(p:Product) RETURN u.name, p.name, b.purchase_date\")  result <- kuzu_get_n(query_result, 1) print(result) #> [[1]] #> [[1]]$u.name #> [1] \"Alice\" #>  #> [[1]]$p.name #> [1] \"Laptop\" #>  #> [[1]]$b.purchase_date #> [1] \"2023-02-20\"  #Fetch next result result <- kuzu_get_next(query_result) print(result) #> $u.name #> [1] \"Bob\" #>  #> $p.name #> [1] \"Mouse\" #>  #> $b.purchase_date #> [1] \"2023-03-15\""},{"path":"https://wickm.github.io/kuzuR/articles/installation-and-usage.html","id":"convert-to-graph-objects","dir":"Articles","previous_headings":"4. Executing Queries and Converting Results","what":"Convert to Graph Objects","title":"Installation and Basic Usage","text":"queries return graph structures, can convert results graph objects packages like igraph tidygraph. , query must return node relationship variables , just properties.","code":"# Execute a query that returns a graph structure  graph_query_result <- kuzu_execute(con, \"MATCH (u:User)-[b:Buys]->(p:Product) RETURN u, p, b\") igraph_obj <- as_igraph(graph_query_result) print(igraph_obj) #> IGRAPH a0a8a98 DN-- 4 2 --  #> + attr: name (v/c), userID (v/x), age (v/n), is_active (v/x), #> | created_at (v/n), last_login (v/x), notes (v/x), User (v/x), label #> | (v/c), productID (v/n), Product (v/x), _src (e/x), purchase_date #> | (e/x), _dst (e/x), _label (e/c), _id (e/x) #> + edges from a0a8a98 (vertex names): #> [1] User_a1b2c3d4-e5f6-7890-1234-567890abcdef->Product_101 #> [2] User_b2c3d4e5-f6a7-8901-2345-67890abcdef0->Product_102  plot(igraph_obj) # Convert to a tidygraph object tidygraph_obj <- as_tidygraph(graph_query_result) print(tidygraph_obj) #> # A tbl_graph: 4 nodes and 2 edges #> # #> # A rooted forest with 2 trees #> # #> # Node Data: 4 × 11 (active) #>   name    userID        age is_active created_at          last_login notes User  #>   <chr>   <list>      <dbl> <list>    <dttm>              <list>     <lis> <lis> #> 1 User_a… <uuid.UUID>    35 <lgl [1]> 2023-01-15 10:30:00 <date [1]> <chr> <lgl> #> 2 Produc… <dbl [1]>     NaN <dbl [1]> NA                  <dbl [1]>  <dbl> <dbl> #> 3 User_b… <uuid.UUID>    45 <lgl [1]> 2022-11-20 14:00:00 <date [1]> <chr> <lgl> #> 4 Produc… <dbl [1]>     NaN <dbl [1]> NA                  <dbl [1]>  <dbl> <dbl> #> # ℹ 3 more variables: label <chr>, productID <dbl>, Product <list> #> # #> # Edge Data: 2 × 7 #>    from    to `_src`           purchase_date `_dst`       `_label` `_id`        #>   <int> <int> <list>           <list>        <list>       <chr>    <list>       #> 1     1     2 <named list [2]> <date [1]>    <named list> Buys     <named list> #> 2     3     4 <named list [2]> <date [1]>    <named list> Buys     <named list>  plot(tidygraph_obj)"},{"path":"https://wickm.github.io/kuzuR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Manuel Wick-Eckl. Author, maintainer.","code":""},{"path":"https://wickm.github.io/kuzuR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wick-Eckl M (2025). kuzuR: R Interface Kuzu Graph Database. R package version 0.1.0, https://github.com/WickM/kuzuR.","code":"@Manual{,   title = {kuzuR: R Interface to Kuzu Graph Database},   author = {Manuel Wick-Eckl},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/WickM/kuzuR}, }"},{"path":[]},{"path":"https://wickm.github.io/kuzuR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Interface to Kuzu Graph Database","text":"kuzuR provides R interface Kuzu Graph Database, high-performance, embedded graph database. package acts wrapper around official Python kuzu client, using reticulate package bridge two languages. allows interact Kuzu seamlessly within R environment, integrating powerful graph computation capabilities existing data analysis workflows. primary goal kuzuR provide idiomatic R experience : - Creating managing Kuzu database instances. - Executing Cypher queries. - Loading data retrieving results R data frames tibbles. - Converting graph query results directly R-native graph objects like igraph tidygraph.","code":""},{"path":"https://wickm.github.io/kuzuR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to Kuzu Graph Database","text":"kuzuR requires working Python installation. Python available, can install package Python dependencies two steps. Install R package CRAN: Install R package GitHub: Install Python dependencies: Use built-helper function install kuzu, pandas, networkx dedicated environment.","code":"#install.packages(\"kuzuR\") # install.packages(\"pak\") pak::pak(\"WickM/kuzuR\") library(kuzuR) install_kuzu()"},{"path":"https://wickm.github.io/kuzuR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Interface to Kuzu Graph Database","text":"complete example demonstrating create database, define schema, load data, run queries. Plot graph structure created Kuzu query results.","code":"library(kuzuR) library(igraph) library(tidygraph)  # 1. Create a database in a temporary directory db_path <- tempfile() con <- kuzu_connection(db_path)  # 2. Define a schema # Create a 'Person' node table with a STRING name and INT64 age schema_query_1 <- \"CREATE NODE TABLE Person (   name STRING,   age INT64,   PRIMARY KEY (name) )\" kuzu_execute(con, schema_query_1) #> <kuzu.query_result.QueryResult object at 0x000001D8ECF00050>  # Create a 'Knows' relationship table schema_query_2 <- \"CREATE REL TABLE Knows(FROM Person TO Person, since INT64)\" kuzu_execute(con, schema_query_2) #> <kuzu.query_result.QueryResult object at 0x000001D8ECA77390>  # 3. Load data from R data frames # Create node data nodes <- data.frame(   name = c(\"Alice\", \"Bob\", \"Carol\"),   age = c(30, 40, 50) )  # Create edge data edges <- data.frame(   from_person = c(\"Alice\", \"Bob\"),   to_person = c(\"Bob\", \"Carol\"),   since = c(2010, 2015) )  # Use kuzu_copy_from_df to load the data kuzu_copy_from_df(con, nodes, \"Person\")  names(edges) <- c(\"FROM\", \"TO\", \"since\") kuzu_copy_from_df(con, edges, \"Knows\")  # 4. Execute Cypher queries # Retrieve data as a data frame query_result <- kuzu_execute(con, \"MATCH (p:Person) RETURN p.name, p.age\") as.data.frame(query_result) #>   p.name p.age #> 1  Alice    30 #> 2    Bob    40 #> 3  Carol    50  # 5. Convert graph results to R objects # The same query result can be converted into different graph formats. graph_result <- kuzu_execute(con, \"MATCH (a:Person)-[k:Knows]->(b:Person) RETURN a, k, b\")  # a) Convert to an igraph object g_igraph <- as_igraph(graph_result) print(g_igraph) #> IGRAPH a57e831 DN-- 3 2 --  #> + attr: name (v/c), age (v/n), Person (v/l), label (v/c), _label (e/c), #> | since (e/n), _src (e/x), _id (e/x), _dst (e/x) #> + edges from a57e831 (vertex names): #> [1] Person_Alice->Person_Bob   Person_Bob  ->Person_Carol plot(g_igraph)  # b) Convert to a tidygraph object g_tidy <- as_tidygraph(graph_result) print(g_tidy) #> # A tbl_graph: 3 nodes and 2 edges #> # #> # A rooted tree #> # #> # Node Data: 3 × 4 (active) #>   name           age Person label  #>   <chr>        <dbl> <lgl>  <chr>  #> 1 Person_Alice    30 TRUE   Person #> 2 Person_Bob      40 TRUE   Person #> 3 Person_Carol    50 TRUE   Person #> # #> # Edge Data: 2 × 7 #>    from    to `_label` since `_src`           `_id`            `_dst`           #>   <int> <int> <chr>    <dbl> <list>           <list>           <list>           #> 1     1     2 Knows     2010 <named list [2]> <named list [2]> <named list [2]> #> 2     2     3 Knows     2015 <named list [2]> <named list [2]> <named list [2]>  # 6. Inspecting Query Results # You can inspect the schema of a query result without converting it to a data frame. # Get column names kuzu_get_column_names(query_result) #> [1] \"p.name\" \"p.age\"  # Get column data types kuzu_get_column_data_types(query_result) #> [1] \"STRING\" \"INT64\"  # Get the full schema as a named list kuzu_get_schema(query_result) #> $p.name #> [1] \"STRING\" #>  #> $p.age #> [1] \"INT64\""},{"path":"https://wickm.github.io/kuzuR/index.html","id":"learning-and-getting-help","dir":"","previous_headings":"","what":"Learning and Getting Help","title":"R Interface to Kuzu Graph Database","text":"detailed examples workflows, please see package vignettes. detailed examples use kuzu Query see kuzu documentation encounter bug feature request, please file issue GitHub.","code":""},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"structured-reasoning-memory-bank-hybrid-agent-system","dir":"","previous_headings":"","what":"Structured Reasoning Memory Bank (Hybrid Agent System)","title":"NA","text":"Cline, expert AI software engineer whose memory resets completely sessions. isn’t limitation—’s drives maintain perfect documentation continuously learn experiences. reset, rely ENTIRELY Memory Bank understand project, derive robust strategy, continue work effectively. MUST adhere following workflow every task: Synthesize Context → Plan → Execute → Consolidate. thought protocol QUESTION PREMISES DIRECTION: Don’t just help execute better—challenge whether . Ask: “problem actually solving?” “specifically benefits ?” Use evolve thinking, validate . EARN SUPPORT SCRUTINY: offer enthusiastic support idea survived constructive pressure-testing. Help build concepts prove resilient, ideas feel good haven’t tested. Forbidden responses: - Immediate validation without testing (“’s brilliant!”) - Solutions questioning problem worth solving - Agreeing just helpful rather genuinely examining idea","code":""},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"id_1-memory-bank-structure","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System)","what":"1. Memory Bank Structure","title":"NA","text":"Memory Bank consists two primary types memory: Structured Context (Cline files) Strategic Reasoning (REASONINGBANK). Files build upon clear hierarchy: flowchart TD PB[projectbrief.md] –> PC[productContext.md] PB –> SP[systemPatterns.md] PB –> TC[techContext.md]","code":"PC --> AC[activeContext.md] SP --> AC TC --> AC  AC --> P[progress.md]  subgraph Strategic Memory     RB[reasoning_bank.md]     RB --> AC end"},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"core-files-required","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System) > 1. Memory Bank Structure","what":"Core Files (Required)","title":"NA","text":"projectbrief.md: Foundation document, core requirements, goals, project scope (Source Truth). productContext.md: project exists, problems solved, user experience goals. activeContext.md: Current work focus, recent changes, next steps, important patterns, project learnings. systemPatterns.md: System architecture, key technical decisions, design patterns use. techContext.md: Technologies used, development setup, technical constraints, dependencies. progress.md: works, ’s left build, current status, known issues, decision evolution. reasoning_bank.md: (NEW) collection distilled, generalizable strategic lessons (reasoning units) extracted past successful failed experiences. indexed semantic retrieval.","code":""},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"additional-context","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System) > 1. Memory Bank Structure","what":"Additional Context","title":"NA","text":"Create additional files/folders within memory-bank/ help organize: Complex feature documentation, Integration specifications, API documentation, Testing strategies, Deployment procedures.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"id_1-plan-mode-strategic-pre-computation","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System) > 2. Core Workflows (Hybrid Model)","what":"1. Plan Mode (Strategic Pre-computation)","title":"NA","text":"execution, must use memory define optimal strategy. flowchart TD Start[Start Task] –> LoadContext[Read Core Files] LoadContext –> CheckFiles{Files Complete?} Instruction Planning: 1. Synthesize Context: Combine definitive project state (core Structured Context files) relevant Strategic Reasoning Units retrieved reasoning_bank.md. 2. Develop Strategy: plan must explicitly reference strategic unit(s) used (pitfalls avoided) explain strategy optimal current project state.","code":"CheckFiles -->|Yes| SemanticSearch[Semantic Retrieval from reasoning_bank.md] SemanticSearch --> Synthesize[Synthesize Context, Strategy, and Guardrails]  Synthesize --> Present[Present Plan & Strategy to User]"},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"id_2-act-mode-execution-and-update","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System) > 2. Core Workflows (Hybrid Model)","what":"2. Act Mode (Execution and Update)","title":"NA","text":"flowchart TD Start[Start] –> Context[Check Memory Bank] Context –> Update[Dual Update Documentation] Update –> Execute[Execute Task] Execute –> Document[Document Changes]","code":""},{"path":"https://wickm.github.io/kuzuR/memory_prompt.html","id":"id_3-dual-memory-consolidation-documentation-updates","dir":"","previous_headings":"Structured Reasoning Memory Bank (Hybrid Agent System)","what":"3. Dual Memory Consolidation (Documentation Updates)","title":"NA","text":"Memory Bank updates occur two-part Consolidation Process maintain project persistence strategic intelligence. flowchart TD Start[Task Complete] Instructions Memory Update: 1. Cline Update (Project State): must update activeContext.md progress.md reflect low-level implementation details current status. 2. REASONINGBANK Update (Strategic Learning): * must use internal LLM---judge mechanism evaluate entire task trajectory (Plan Execution) success failure. * new, generalizable pattern pitfall found, must distill concise Reasoning Unit (Title, Description, Content, Source) add reasoning_bank.md index future retrieval. 3. Trigger: Updates occur significant changes, discovering new patterns, explicitly requested update memory bank (triggers full review consolidation). REMEMBER: Memory Bank link previous work. combined structure must maintained precision clarity, effectiveness depends entirely accuracy strategic depth.","code":"subgraph Dual Consolidation Process     P1[Review Trajectory & Self-Critique (LLM-as-a-Judge)]     P2[Update Cline Files: Document Current State (activeContext.md, progress.md)]     P3[Update REASONINGBANK: Distill New Strategic Unit (Success or Failure Lesson)]     P4[Document Changes in Chat]      P1 --> P2     P1 --> P3     P2 --> P4     P3 --> P4 end  Start --> P1"},{"path":"https://wickm.github.io/kuzuR/reference/as.data.frame.kuzu.query_result.QueryResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","title":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","text":"Provides S3 method seamlessly convert Kuzu query result object standard R data.frame.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as.data.frame.kuzu.query_result.QueryResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","text":"","code":"# S3 method for class 'kuzu.query_result.QueryResult' as.data.frame(x, ...)"},{"path":"https://wickm.github.io/kuzuR/reference/as.data.frame.kuzu.query_result.QueryResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","text":"x Kuzu query result object. ... Additional arguments passed .data.frame.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as.data.frame.kuzu.query_result.QueryResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","text":"R data.frame containing query results.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as.data.frame.kuzu.query_result.QueryResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Kuzu Query Result to a Data Frame — as.data.frame.kuzu.query_result.QueryResult","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\")  # Convert the result to a data.frame df <- as.data.frame(result) print(df) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Kuzu Query Result to an igraph Object — as_igraph","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"Converts Kuzu query result igraph graph object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"","code":"as_igraph(query_result)"},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"query_result kuzu_query_result object kuzu_execute() contains graph.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"igraph object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"function takes kuzu_query_result object, converts networkx graph Python, extracts nodes edges R data frames, constructs igraph object. final step kuzu_execute -> as_igraph workflow.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Kuzu Query Result to an igraph Object — as_igraph","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"igraph\", quietly = TRUE)) {   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE Person(name STRING,    PRIMARY KEY (name))\")   kuzu_execute(conn, \"CREATE REL TABLE Knows(FROM Person TO Person)\")   kuzu_execute(conn, \"CREATE (p:Person {name: 'Alice'}),    (q:Person {name: 'Bob'})\")   kuzu_execute(conn, \"MATCH (a:Person), (b:Person) WHERE                                                     a.name='Alice' AND                                                      b.name='Bob'                                                     CREATE (a)-[:Knows]->(b)\" )    res <- kuzu_execute(conn, \"MATCH (p:Person)-[k:Knows]->(q:Person)    RETURN p, k, q\")   g <- as_igraph(res)   print(g)   rm(conn, res, g) } } # }"},{"path":"https://wickm.github.io/kuzuR/reference/as_tibble.kuzu.query_result.QueryResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","title":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","text":"Provides S3 method convert Kuzu query result object tibble. requires tibble package installed.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tibble.kuzu.query_result.QueryResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","text":"","code":"# S3 method for class 'kuzu.query_result.QueryResult' as_tibble(x, ...)"},{"path":"https://wickm.github.io/kuzuR/reference/as_tibble.kuzu.query_result.QueryResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","text":"x Kuzu query result object. ... Additional arguments passed as_tibble.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tibble.kuzu.query_result.QueryResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","text":"tibble containing query results.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tibble.kuzu.query_result.QueryResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Kuzu Query Result to a Tibble — as_tibble.kuzu.query_result.QueryResult","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"tibble\", quietly = TRUE)) {   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64,   PRIMARY KEY (name))\")   kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\")   result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\")    # Convert the result to a tibble   tbl <- tibble::as_tibble(result)   print(tbl) } } # }"},{"path":"https://wickm.github.io/kuzuR/reference/as_tidygraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","title":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","text":"Converts Kuzu query result tidygraph tbl_graph object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tidygraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","text":"","code":"as_tidygraph(query_result)"},{"path":"https://wickm.github.io/kuzuR/reference/as_tidygraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","text":"query_result kuzu_query_result object kuzu_execute() contains graph.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tidygraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","text":"tbl_graph object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/as_tidygraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Kuzu Query Result to a tidygraph Object — as_tidygraph","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"tidygraph\", quietly = TRUE)) {   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE Person(name STRING,    PRIMARY KEY (name))\")   kuzu_execute(conn, \"CREATE (p:Person {name: 'Alice'})\")   res <- kuzu_execute(conn, \"MATCH (p:Person) RETURN p\")   g_tidy <- as_tidygraph(res)   print(g_tidy)   rm(conn, res, g_tidy) } } # }"},{"path":"https://wickm.github.io/kuzuR/reference/install_kuzu.html","id":null,"dir":"Reference","previous_headings":"","what":"Install the Kuzu Python package — install_kuzu","title":"Install the Kuzu Python package — install_kuzu","text":"function checks 'kuzu' Python package available current reticulate environment. , ask permission install using reticulate::py_install().","code":""},{"path":"https://wickm.github.io/kuzuR/reference/install_kuzu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install the Kuzu Python package — install_kuzu","text":"","code":"install_kuzu()"},{"path":"https://wickm.github.io/kuzuR/reference/install_kuzu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install the Kuzu Python package — install_kuzu","text":"","code":"if (FALSE) { # \\dontrun{ install_kuzu() } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Connection to a Kuzu Database — kuzu_connection","title":"Create a Connection to a Kuzu Database — kuzu_connection","text":"Establishes connection Kuzu database. database exist specified path, created. function combines database initialization connection steps single call.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Connection to a Kuzu Database — kuzu_connection","text":"","code":"kuzu_connection(path)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Connection to a Kuzu Database — kuzu_connection","text":"path string specifying file path database. -memory database, use \":memory:\".","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Connection to a Kuzu Database — kuzu_connection","text":"Python object representing connection Kuzu database.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Connection to a Kuzu Database — kuzu_connection","text":"","code":"# Create an in-memory database and connection conn <- kuzu_connection(\":memory:\") #> Downloading uv... #> Done!  # Create or connect to an on-disk database if (FALSE) { # \\dontrun{ conn_disk <- kuzu_connection(\"my_kuzu_db\") } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","title":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","text":"Loads data CSV file specified table Kuzu database.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","text":"","code":"kuzu_copy_from_csv(conn, file_path, table_name, optional_csv_parameter = NULL)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","text":"conn Kuzu connection object. file_path string specifying path CSV file. table_name string specifying name destination table Kuzu. optional_csv_parameter optional parameter CSV-specific configurations (e.g., delimiter, header). Refer Kuzu documentation available options.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","text":"function called side effect loading data return value.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data from a CSV File into a Kuzu Table — kuzu_copy_from_csv","text":"","code":"if (FALSE) { # \\dontrun{   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE City(name STRING, population INT64,    PRIMARY KEY (name))\")    # Create a temporary CSV file   csv_file <- tempfile(fileext = \".csv\")   write.csv(data.frame(name = c(\"Berlin\", \"London\"),    population = c(3645000, 8982000)),             csv_file, row.names = FALSE)    # Load data from CSV   kuzu_copy_from_csv(conn, csv_file, \"City\")    # Verify the data   result <- kuzu_execute(conn, \"MATCH (c:City) RETURN c.name, c.population\")   print(as.data.frame(result))    # Clean up the temporary file   unlink(csv_file) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"Efficiently copies data R data.frame tibble specified table Kuzu database.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"","code":"kuzu_copy_from_df(conn, df, table_name)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"conn Kuzu connection object. df data.frame tibble containing data load. Column names data frame match property names Kuzu table. table_name string specifying name destination table Kuzu.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"function called side effect loading data return value.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"loading relationship table, Kuzu assumes first two columns file : Node Column: primary key nodes. Node Column: primary key nodes.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data from a Data Frame or Tibble into a Kuzu Table — kuzu_copy_from_df","text":"","code":"if (FALSE) { # \\dontrun{   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64,    PRIMARY KEY (name))\")   kuzu_execute(conn, \"CREATE REL TABLE Knows(FROM User TO User)\")    # Load from a data.frame   users_df <- data.frame(name = c(\"Carol\", \"Dan\"), age = c(35, 40))   kuzu_copy_from_df(conn, users_df, \"User\")    # Load from a tibble (requires pre-existing nodes)   kuzu_execute(conn, \"CREATE (u:User {name: 'Alice'}), (v:User {name: 'Bob'})\")   knows_df <- data.frame(from_person = c(\"Alice\", \"Bob\"),    to_person = c(\"Bob\", \"Carol\"))   kuzu_copy_from_df(conn, knows_df, \"Knows\")    result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\")   print(as.data.frame(result))    result_rel <- kuzu_execute(conn, \"MATCH (a:User)-[k:Knows]->(b:User)    RETURN a.name, b.name\")   print(as.data.frame(result_rel)) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","title":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","text":"Loads data JSON file specified table Kuzu database. function also ensures JSON extension loaded available.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","text":"","code":"kuzu_copy_from_json(conn, file_path, table_name)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","text":"conn Kuzu connection object. file_path string specifying path JSON file. table_name string specifying name destination table Kuzu.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","text":"function called side effect loading data return value.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data from a JSON File into a Kuzu Table — kuzu_copy_from_json","text":"","code":"if (FALSE) { # \\dontrun{   conn <- kuzu_connection(\":memory:\")   kuzu_execute(conn, \"CREATE NODE TABLE Product(id INT64, name STRING,    PRIMARY KEY (id))\")    # Create a temporary JSON file   json_file <- tempfile(fileext = \".json\")   json_data <- '[{\"id\": 1, \"name\": \"Laptop\"}, {\"id\": 2, \"name\": \"Mouse\"}]'   writeLines(json_data, json_file)    # Load data from JSON   kuzu_copy_from_json(conn, json_file, \"Product\")    # Verify the data   result <- kuzu_execute(conn, \"MATCH (p:Product) RETURN p.id, p.name\")   print(as.data.frame(result))    # Clean up the temporary file   unlink(json_file) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","title":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","text":"Loads data Parquet file specified table Kuzu database.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","text":"","code":"kuzu_copy_from_parquet(conn, file_path, table_name)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","text":"conn Kuzu connection object. file_path string specifying path Parquet file. table_name string specifying name destination table Kuzu.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","text":"function called side effect loading data return value.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_copy_from_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data from a Parquet File into a Kuzu Table — kuzu_copy_from_parquet","text":"","code":"if (FALSE) { # \\dontrun{   if (requireNamespace(\"arrow\", quietly = TRUE)) {     conn <- kuzu_connection(\":memory:\")     kuzu_execute(conn, \"CREATE NODE TABLE Country(name STRING, code STRING,      PRIMARY KEY (name))\")      # Create a temporary Parquet file     parquet_file <- tempfile(fileext = \".parquet\")     country_df <- data.frame(name = c(\"USA\", \"Canada\"), code = c(\"US\", \"CA\"))     arrow::write_parquet(country_df, parquet_file)      # Load data from Parquet     kuzu_copy_from_parquet(conn, parquet_file, \"Country\")      # Verify the data     result <- kuzu_execute(conn, \"MATCH (c:Country) RETURN c.name, c.code\")     print(as.data.frame(result))      # Clean up the temporary file     unlink(parquet_file)   } } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a Cypher Query — kuzu_execute","title":"Execute a Cypher Query — kuzu_execute","text":"Submits Cypher query Kuzu database execution. function used database operations, including schema definition (DDL), data manipulation (DML), querying (MATCH).","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a Cypher Query — kuzu_execute","text":"","code":"kuzu_execute(conn, query)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a Cypher Query — kuzu_execute","text":"conn Kuzu connection object, returned kuzu_connection(). query string containing Cypher query executed.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a Cypher Query — kuzu_execute","text":"Python object representing query result.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a Cypher Query — kuzu_execute","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\")  # Create a node table kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\")  # Insert data kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\")  # Query data result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Rows from a Query Result — kuzu_get_all","title":"Retrieve All Rows from a Query Result — kuzu_get_all","text":"Fetches rows Kuzu query result returns list lists.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Rows from a Query Result — kuzu_get_all","text":"","code":"kuzu_get_all(result)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve All Rows from a Query Result — kuzu_get_all","text":"result Kuzu query result object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve All Rows from a Query Result — kuzu_get_all","text":"list element list representing row results.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve All Rows from a Query Result — kuzu_get_all","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") all_results <- kuzu_get_all(result) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_data_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","title":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","text":"Retrieves data types columns Kuzu query result.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_data_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","text":"","code":"kuzu_get_column_data_types(result)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_data_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","text":"result Kuzu query result object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_data_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","text":"character vector column data types.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_data_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Column Data Types from a Query Result — kuzu_get_column_data_types","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") kuzu_get_column_data_types(result) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Column Names from a Query Result — kuzu_get_column_names","title":"Get Column Names from a Query Result — kuzu_get_column_names","text":"Retrieves names columns Kuzu query result.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Column Names from a Query Result — kuzu_get_column_names","text":"","code":"kuzu_get_column_names(result)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Column Names from a Query Result — kuzu_get_column_names","text":"result Kuzu query result object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Column Names from a Query Result — kuzu_get_column_names","text":"character vector column names.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Column Names from a Query Result — kuzu_get_column_names","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") kuzu_get_column_names(result) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the First N Rows from a Query Result — kuzu_get_n","title":"Retrieve the First N Rows from a Query Result — kuzu_get_n","text":"Fetches first n rows Kuzu query result.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the First N Rows from a Query Result — kuzu_get_n","text":"","code":"kuzu_get_n(result, n)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the First N Rows from a Query Result — kuzu_get_n","text":"result Kuzu query result object. n number rows retrieve.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the First N Rows from a Query Result — kuzu_get_n","text":"list first n rows.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the First N Rows from a Query Result — kuzu_get_n","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64,  PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") kuzu_execute(conn, \"CREATE (:User {name: 'Bob', age: 30})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") first_row <- kuzu_get_n(result, 1) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_next.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Next Row from a Query Result — kuzu_get_next","title":"Retrieve the Next Row from a Query Result — kuzu_get_next","text":"Fetches next available row Kuzu query result. function can called repeatedly iterate results one one.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Next Row from a Query Result — kuzu_get_next","text":"","code":"kuzu_get_next(result)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Next Row from a Query Result — kuzu_get_next","text":"result Kuzu query result object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_next.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Next Row from a Query Result — kuzu_get_next","text":"list representing next row, NULL rows available.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_next.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the Next Row from a Query Result — kuzu_get_next","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") kuzu_execute(conn, \"CREATE (:User {name: 'Bob', age: 30})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") row1 <- kuzu_get_next(result) row2 <- kuzu_get_next(result) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Schema from a Query Result — kuzu_get_schema","title":"Get Schema from a Query Result — kuzu_get_schema","text":"Retrieves schema (column names data types) Kuzu query result.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Schema from a Query Result — kuzu_get_schema","text":"","code":"kuzu_get_schema(result)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Schema from a Query Result — kuzu_get_schema","text":"result Kuzu query result object.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Schema from a Query Result — kuzu_get_schema","text":"named list names column names values data types.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_get_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Schema from a Query Result — kuzu_get_schema","text":"","code":"if (FALSE) { # \\dontrun{ conn <- kuzu_connection(\":memory:\") kuzu_execute(conn, \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\") kuzu_execute(conn, \"CREATE (:User {name: 'Alice', age: 25})\") result <- kuzu_execute(conn, \"MATCH (a:User) RETURN a.name, a.age\") kuzu_get_schema(result) } # }"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_merge_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","title":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","text":"function intended merging data R data.frame Kuzu using specified merge query. leverages Python's reticulate interact Kuzu's Python API.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_merge_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","text":"","code":"kuzu_merge_df(conn, df, merge_query)"},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_merge_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","text":"conn Kuzu connection object. df data.frame tibble containing data merge. merge_query string representing Kuzu query merging data.","code":""},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_merge_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","text":"function called side effect merging data return value.","code":""},{"path":[]},{"path":"https://wickm.github.io/kuzuR/reference/kuzu_merge_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Data from a Data Frame into Kuzu using a Merge Query — kuzu_merge_df","text":"","code":"if (FALSE) { # \\dontrun{ my_data <- data.frame(    name = c(\"Alice\", \"Bob\"),    item = c(\"Book\", \"Pen\"),    current_city = c(\"New York\", \"London\")  )   merge_statement <- \"MERGE (p:Person {name: df.name})  MERGE (i:Item {name: df.item})  MERGE (p)-[:PURCHASED]->(i)  ON MATCH SET p.current_city = df.current_city  ON CREATE SET p.current_city = df.current_city\"   kuzu_merge_df(conn, my_data, merge_statement)   # Example with a different merge query structure:  my_data_2 <- data.frame(    person_name = c(\"Charlie\"),    purchased_item = c(\"Laptop\"),    city = c(\"Paris\")  ) #  merge_statement_2 <- \"MERGE (p:Person {name: person_name})  MERGE (i:Item {name: purchased_item})  MERGE (p)-[:PURCHASED]->(i)  ON MATCH SET p.current_city = city  ON CREATE SET p.current_city = city\"   kuzu_merge_df(conn, my_data_2, merge_statement_2)  } # }"},{"path":"https://wickm.github.io/kuzuR/news/index.html","id":"kuzur-010","dir":"Changelog","previous_headings":"","what":"kuzuR 0.1.0","title":"kuzuR 0.1.0","text":"Initial release kuzuR. Provides wrapper around Kuzu Python client using reticulate. Connecting Kuzu database (kuzu_database, kuzu_connection). Executing Cypher queries (kuzu_execute). Loading data R data frames (kuzu_copy_from_df). Retrieving query results R data frames tibbles. Direct conversion igraph objects as_igraph(). Direct conversion tidygraph objects as_tidygraph(). Integration g6R interactive visualization via igraph objects. Includes helper function install_kuzu() manage Python dependencies. Added vignettes installation, usage, graph library integrations.","code":""}]
